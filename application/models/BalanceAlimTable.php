<?php

/**
 * NomProducto
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BalanceAlimTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return BalanceAlimTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('BalanceAlim');
    }

    /**
     * Consulta para seleccionar los datos en el formato del model en ExtJs
     * inner join con Comedor
     * inner join con comedor.TipoComedor
     * inner join con comedor.Entidad
     * inner join con entidad.Organismo
     * 
     * @return Doctrine_Query
     */
    private function _getPreparedQuery($mes, $year) {
        if (!$year || $year === '%') {
            $year = date("Y");
        }
//        if (!$mes || $mes === '%') {
//            $mes = date("m");
//        }
        $mes = '%';
        $time = $year . '-' . $mes . '%';
        return $this->createQuery('balance')
                        ->select('balance.*,balance.nivel_act*balance.indice_comensal as norma, comedor.tc as comedor_tc, tipocomedor.nombre as comedor_nombre')
                        ->addSelect('entidad.id as entidad_id, entidad.nombre as entidad_nombre')
                        ->innerJoin('balance.Comedor comedor')
                        //->innerJoin('balance.BalanceMes bm')
                        ->innerJoin('comedor.TipoComedor tipocomedor')
                        ->innerJoin('comedor.Entidad entidad')
                        ->where('balance.created_at like "' . $time . '"')
                        //->andWhere('bm.created_at like ?',$time)
                        //->innerJoin('entidad.Organismo organismo')
                        ->setHydrationMode(Doctrine::HYDRATE_ARRAY);
    }

    public function balance_alimentacion_tabla($id_entidad) {
        $time = date("Y") . '%';
        $time2 = date("Y").'-'.date("m") . '%';
        return $this->createQuery('balance')
                        ->select('balance.*, balance.id as balance_id, balance.nivel_act*balance.indice_comensal as comensal, tipocomedor.periodo as periodo, comedor.tc as comedor_tc, tipocomedor.nombre as comedor_nombre')
                        ->addSelect('entidad.id as entidad_id, entidad.nombre as entidad_nombre')
                        ->innerJoin('balance.Comedor comedor')
                        //->innerJoin('balance.BalanceMes bm')
                        ->innerJoin('comedor.TipoComedor tipocomedor')
                        ->innerJoin('comedor.Entidad entidad')
                        ->where('balance.created_at like "' . $time . '" ' . 'and entidad.id like "' . $id_entidad . '"')
                        //->andWhere('bm.created_at like ?',$time2)
                        ->orderBy('comedor_nombre asc')
                        ->execute()->toArray(true);
    }

    public function entityName($time) {
        return $this->createQuery('balance')
                        ->select('balance.id,comedor.id,entidad.id as entidad_id,entidad.nombre as entidad_nombre')
                        ->innerJoin('balance.Comedor comedor')
                        ->innerJoin('comedor.Entidad entidad')
                        ->where('balance.created_at like "' . $time . '"')
                        ->groupBy('entidad_nombre')
                        ->execute()->toArray(true);
    }

    /**
     * 
     * Dado el aÃ±o y el id del organismo, devuelve la lista de entidades
     */
    public function entidadesPorOrganismo($time, $org_id) {
        return $this->createQuery('balance')
                        ->select('balance.id,comedor.id,entidad.id as entidad_id,entidad.nombre as entidad_nombre')
                        ->innerJoin('balance.Comedor comedor')
                        ->innerJoin('comedor.Entidad entidad')
                        ->innerJoin('entidad.Organismo organismo')
                        ->where('balance.created_at like "' . $time . '"')
                        ->andWhere('organismo.id like "' . $org_id . '"')
                        ->groupBy('entidad_nombre')
                        ->execute()->toArray(true);
    }

    public function organismos($time) {
        return $this->createQuery('balance')
                        ->select('balance.*,comedor.*, entidad.*, organismo.id as organismo_id, organismo.nombre as organismo_nombre')
                        ->innerJoin('balance.Comedor comedor')
                        ->innerJoin('comedor.Entidad entidad')
                        ->innerJoin('entidad.Organismo organismo')
                        ->where('balance.created_at like "' . $time . '"')
                        ->groupBy('organismo_nombre')
                        ->execute()->toArray(true);
    }

    /**
     * Devuelve todo de Nivel de Actividad
     * 
     * @return array
     */
    public function findAllWithComedor($mes, $year) {
        return $this->_getPreparedQuery($mes, $year)->execute();
    }

}
